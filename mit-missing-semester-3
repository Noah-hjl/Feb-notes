# Feb-notes

# key knowledge points about mit-missing semester

4. Automating Tasks with Make

5. Debugging with GDB

# specific things about 4. Automating Tasks with Make:

   # Makefiles: A Makefile is a text file that defines a set of tasks to be executed. It specifies how files depend on each other and how to update them. The syntax of a Makefile allows you to define rules that describe the relationships between files and the commands to be executed when those files change.

1. three main components: Target (the file that needs to be built)、Dependencies (Files that the target depends on)、Recipe (The commands to be executed to build the target from its dependencies)

2.eg.

      # Makefile Example

# Define the compiler
CC = gcc
CFLAGS = -Wall

# Target: myprogram
# Dependencies: main.o helper.o
# Recipe: Compile and link the program
myprogram: main.o helper.o
    $(CC) $(CFLAGS) main.o helper.o -o myprogram

# Rule to create main.o from main.c
main.o: main.c
    $(CC) $(CFLAGS) -c main.c

# Rule to create helper.o from helper.c
helper.o: helper.c
    $(CC) $(CFLAGS) -c helper.c

# Clean up intermediate files
clean:
    rm -f *.o myprogram

3. explanations:

    Variables: CC is the compiler (gcc in this case), and CFLAGS contains compiler flags (-Wall enables warnings).变量：CC 是编译器（在本例中为 gcc），CFLAGS 包含编译器标志（-Wall 启用警告）。

    Target: myprogram is the final executable.目标： myprogram 是最终可执行文件。

    Dependencies: main.o and helper.o are object files that need to be created first.依赖项：main.o 和 helper.o 是需要先创建的目标文件。

    Recipe: The $(CC) $(CFLAGS) command is used to compile and link the object files into the executable myprogram.方法： $（CC） $（CFLAGS） 命令用于编译目标文件并将其链接到可执行的 myprogram 中。

    Clean Rule: The clean rule removes all object files and the executable, allowing for a fresh build.Clean Rule：清理规则会删除所有对象文件和可执行文件，从而允许进行全新构建。

4. Running Make:

To build the target (e.g., myprogram), simply run:

    make

To clean up intermediate files, run:

    make clean

5. Advanced Makefile Features: Pattern rules（比较复杂 建议需要使用时查找使用）

Pattern rules are a way to specify how to build a target (file) based on a pattern. The general syntax is:

    target_pattern: dependency_pattern

    command_to_build_target

eg:

    %.o: %.c
    gcc -c $< -o $@

    explanation: %.o: %.c: The %.o matches any file ending in .o, and %.c matches the corresponding .c file with the same base name. The % is a wildcard that represents the base name (before the extension) of the files.%.o： %.c： %.o 

    匹配任何以 .o 结尾的文件，而 %.c 匹配具有相同基本名称的相应 .c 文件。% 是一个通配符，表示文件的基本名称（在扩展名之前）。

    $<: Refers to the first prerequisite (in this case, the .c file).
    $<：指第一个先决条件（在本例中为 .c 文件）。
    $@: Refers to the target (in this case, the .o file).
    $@：指目标（在本例中为 .o 文件）。

    

  
   
